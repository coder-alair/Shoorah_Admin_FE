import React, { Fragment, useEffect, useRef, useState } from 'react';
import { useParams } from 'react-router-dom';
import { AGERANGE, DATECREITERIA, GENDER } from '../../../../utils/constants';
import { DateRangePicker } from 'react-date-range';
import {
  convertLargeTextToPDF,
  currentDateWithFormat,
  downloadOWBMHReportToCSV,
  downloadOWBMHReportToPDF,
  downloadSingleRadialReportToCSV,
  downloadSingleRadialReportToPDF,
  errorToast,
  getJWTToken,
  getLocalStorageItem,
  minusDayOnDate,
  minusMonthOnDate,
  useOutsideClick
} from '../../../../utils/helper';
import { CalendarIcon } from '@heroicons/react/24/outline';
import { Popover, Transition } from '@headlessui/react';
import {
  allBarOptions,
  negativeBarOption,
  optionFirstGraph,
  positiveBarOption,
  radialGraphOption,
  redialPersonalSelect,
  redialProfestionalSelect
} from './dummy';
import Chart from 'react-apexcharts';
import ReactApexChart from 'react-apexcharts';
import { CompanyApi } from '../../../../api/companyApi';
import Loader from '../../../../component/common/Loader';
import axios from 'axios';
import { useLocation } from 'react-router-dom';

// images import
import happyImg from '../../../../assets/images/happy.svg';
import neutralImg from '../../../../assets/images/neutral.svg';
import sadImg from '../../../../assets/images/sad.svg';
import { API_BASE_URL } from '../../../../core/env.configs';

function CDashboard(props) {
  const location = useLocation();

  // Access the state from location object
  const { state } = location;

  // Now you can use the state in your component

  const userData = state?._id
    ? state
    : getLocalStorageItem('userData') && JSON.parse(getLocalStorageItem('userData'));
  const token = getLocalStorageItem('token');
  const wrapperRef = useRef(null);
  const [loader, setLoader] = useState(false);
  const [parameters, setParameters] = useState({
    dateCriteria: '1',
    location: '',
    department: '',
    age: '',
    gender: '',
    startDate: new Date(),
    endDate: new Date(),
    dataType: '',
    ethinicity: ''
  });
  const [model, setModel] = useState({
    datePickerVisible: false,
    dateChanged: false,
    dateButtonVisible: false
  });
  const [graphDataType, setGraphDataType] = useState({
    firstGrapgh: 'All',
    secondGrapgh: 'All',
    thirdGrapgh: 'Personal'
  });
  const [firstGraph, setFirstGraph] = useState({ data: [], option: {} });
  const [firstGraphAlternate, setFirstGraphAlternate] = useState({
    data: [],
    option: {}
  });
  const [secondGraph, setSecondGraph] = useState(allBarOptions);
  const [secondGraphAlternate, setSecondGraphAlternate] = useState(allBarOptions);
  const [thirdGraph, setThirdGraph] = useState({ data: [], option: {} });
  const [thirdGraphAlternate, setThirdGraphAlternate] = useState({
    data: [],
    option: {}
  });
  const [radialMood, setRadialMood] = useState(redialPersonalSelect[0].toLowerCase());
  const [radialMoodAlternate, setRadialMoodAlternate] = useState(
    redialProfestionalSelect[0]?.value.toLowerCase()
  );
  const [filterData, setFilterData] = useState({
    countries: [],
    departments: [],
    ethnicities: []
  });
  const [overallMood, setOverallMood] = useState('');
  const [moodPercentage, setMoodPercentage] = useState(null);
  const [firstGraphMoodsAverage, setFirstGraphMoodsAverage] = useState({
    positive: '',
    negative: ''
  });
  const [secondGraphMoodsAverage, setSecondGraphMoodsAverage] = useState({
    positive: '',
    negative: ''
  });
  const [thirdGraphMoodsAverage, setThirdGraphMoodsAverage] = useState({
    positive: '',
    negative: ''
  });

  const [thirdGraphMoodsAverageAlternate, setThirdGraphMoodsAverageAlternate] = useState({
    positive: '',
    negative: ''
  });

  let dateCategory = '';

  const getDate = () => {
    const obj = { startDate: '', endDate: '', minAge: '', maxAge: '' };
    const date = new Date();
    if (parameters.dateCriteria === '1') {
      obj.startDate = currentDateWithFormat(minusDayOnDate(date, 7));
      obj.endDate = currentDateWithFormat(date);
      dateCategory = 'weekly';
    }
    if (parameters.dateCriteria === '2') {
      obj.startDate = currentDateWithFormat(minusDayOnDate(date, 30));
      obj.endDate = currentDateWithFormat(date);
      dateCategory = 'monthly';
    }
    if (parameters.dateCriteria === '3') {
      obj.startDate = currentDateWithFormat(minusMonthOnDate(date, 12));
      obj.endDate = currentDateWithFormat(date);
      dateCategory = 'yearly';
    }
    // if (parameters.dateCriteria === '4' && parameters.endDate === '') return
    if (parameters.dateCriteria === '4') {
      obj.startDate = currentDateWithFormat(parameters?.startDate);
      obj.endDate = currentDateWithFormat(parameters?.endDate);
      dateCategory = 'custom';
    }
    if (parameters.age !== '') {
      const data = AGERANGE.filter((e) => e.value === parameters.age);
      obj.minAge = data[0].content.min;
      obj.maxAge = data[0].content.max;
    }
    return obj;
  };

  const dummy1 = [
    {
      name: 'motivation',
      usersVoted: [7, 2, 10, 18, 2, 20, 1, 20],
      data: [20, 18, 20, 15, 2, 20, 9, 7]
    },
    {
      name: 'positiveness',
      usersVoted: [4, 3, 10, 11, 2, 10, 10, 18],
      data: [4, 2, 10, 19, 2, 30, 18, 18]
    },
    {
      name: 'happy',
      usersVoted: [4, 2, 30, 3, 2, 30, 1, 7],
      data: [4, 30, 18, 19, 2, 10, 1, 18]
    },
    {
      name: 'strong',
      usersVoted: [4, 2, 10, 3, 2, 10, 18, 7],
      data: [4, 2, 10, 19, 25, 18, 1, 18]
    },
    {
      name: 'control',
      usersVoted: [25, 18, 25, 3, 2, 10, 1, 7],
      data: [4, 2, 10, 18, 2, 10, 1, 18]
    },
    {
      name: 'energy',
      usersVoted: [4, 2, 10, 10, 18, 10, 1, 7],
      data: [4, 2, 10, 19, 2, 10, 10, 18]
    },
    {
      name: 'calmness',
      usersVoted: [4, 2, 10, 19, 10, 18, 1, 18],
      data: [4, 2, 10, 3, 2, 10, 18, 7]
    },
    {
      name: 'relax',
      usersVoted: [4, 2, 10, 19, 2, 10, 10, 18],
      data: [4, 10, 18, 3, 2, 10, 1, 7]
    },
    {
      name: 'balance',
      usersVoted: [4, 10, 18, 3, 2, 10, 1, 7],
      data: [4, 10, 18, 19, 2, 10, 1, 18]
    }
  ];

  const dummy2 = [
    {
      name: 'motivation',
      usersVoted: [
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20
      ],
      data: [
        20, 18, 20, 15, 2, 20, 9, 7, 20, 18, 20, 15, 2, 20, 9, 7, 20, 18, 20, 15, 2, 20, 9, 7, 20,
        18, 20, 15, 2, 20, 9, 7
      ]
    },
    {
      name: 'positiveness',
      usersVoted: [
        4, 3, 10, 11, 2, 10, 10, 18, 20, 18, 20, 15, 2, 20, 9, 7, 20, 18, 20, 15, 2, 20, 9, 7, 20,
        18, 20, 15, 2, 20, 9, 7
      ],
      data: [
        4, 2, 10, 19, 2, 30, 18, 18, 4, 2, 10, 19, 2, 30, 18, 18, 4, 2, 10, 19, 2, 30, 18, 18, 4, 2,
        10, 19, 2, 30, 18, 18
      ]
    },
    {
      name: 'happy',
      usersVoted: [
        4, 2, 30, 3, 2, 30, 1, 7, 4, 2, 30, 3, 2, 30, 1, 7, 4, 2, 30, 3, 2, 30, 1, 7, 4, 2, 30, 3,
        2, 30, 1, 7
      ],
      data: [
        4, 30, 18, 19, 2, 10, 1, 18, 4, 2, 30, 3, 2, 30, 1, 7, 4, 2, 30, 3, 2, 30, 1, 7, 4, 2, 30,
        3, 2, 30, 1, 7
      ]
    },
    {
      name: 'strong',
      usersVoted: [
        4, 4, 30, 18, 19, 2, 10, 1, 18, 4, 2, 30, 3, 2, 30, 2, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19,
        2, 10, 1
      ],
      data: [
        4, 18, 4, 2, 30, 3, 2, 30, 2, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19, 2, 10, 1, 2, 10, 19, 25,
        18, 1, 18
      ]
    },
    {
      name: 'control',
      usersVoted: [
        25, 18, 25, 3, 18, 4, 2, 30, 3, 2, 30, 2, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19, 2, 10, 1, 2,
        10, 1, 7
      ],
      data: [
        4, 2, 10, 18, 18, 4, 2, 30, 3, 2, 30, 2, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19, 2, 10, 1, 2,
        10, 1, 18
      ]
    },
    {
      name: 'energy',
      usersVoted: [
        4, 2, 10, 10, 18, 10, 18, 4, 2, 30, 3, 2, 30, 2, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19, 2, 10,
        1, 1, 7
      ],
      data: [
        4, 2, 10, 19, 2, 10, 18, 4, 2, 30, 3, 2, 30, 2, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19, 2, 10,
        1, 10, 18
      ]
    },
    {
      name: 'calmness',
      usersVoted: [
        4, 2, 10, 19, 10, 18, 1, 18, 4, 2, 30, 3, 2, 30, 2, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19, 2,
        10, 1, 18
      ],
      data: [
        4, 2, 10, 3, 2, 10, 18, 4, 2, 30, 3, 2, 30, 2, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19, 2, 10, 1,
        18, 7
      ]
    },
    {
      name: 'relax',
      usersVoted: [
        4, 2, 10, 19, 2, 10, 10, 18, 4, 2, 30, 3, 2, 30, 2, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19, 2,
        10, 1, 18
      ],
      data: [
        4, 10, 18, 3, 2, 10, 18, 4, 2, 30, 3, 2, 30, 2, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19, 2, 10,
        1, 1, 7
      ]
    },
    {
      name: 'balance',
      usersVoted: [
        4, 10, 18, 3, 2, 10, 18, 4, 2, 30, 3, 2, 30, 2, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19, 2, 10,
        1, 1, 7
      ],
      data: [
        4, 10, 18, 19, 2, 10, 18, 4, 2, 30, 3, 2, 30, 2, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19, 2, 10,
        1, 1, 18
      ]
    }
  ];

  const dummy3 = [
    {
      name: 'motivation',
      usersVoted: [
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 20, 7, 2, 10, 18, 2, 20, 1, 20
      ],
      data: [
        20, 18, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 15, 2, 20,
        9, 7, 20, 18, 20, 15, 2, 20, 9, 7, 20, 18, 20, 15, 2, 20, 9, 7, 20, 18, 20, 15, 2, 20, 9, 7
      ]
    },
    {
      name: 'positiveness',
      usersVoted: [
        4, 3, 10, 11, 2, 10, 10, 18, 20, 18, 20, 15, 2, 20, 9, 7, 20, 18, 20, 15, 2, 20, 9, 7, 20,
        18, 20, 15, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 2, 20, 9, 7
      ],
      data: [
        4, 2, 10, 19, 2, 30, 18, 18, 4, 2, 10, 19, 2, 30, 18, 18, 4, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 2, 10, 19, 2, 30, 18, 18, 4, 2, 10, 19, 2, 30, 18, 18
      ]
    },
    {
      name: 'happy',
      usersVoted: [
        4, 2, 30, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 3, 2, 30,
        1, 7, 4, 2, 30, 3, 2, 30, 1, 7, 4, 2, 30, 3, 2, 30, 1, 7, 4, 2, 30, 3, 2, 30, 1, 7
      ],
      data: [
        4, 30, 18, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 19, 2, 10,
        1, 18, 4, 2, 30, 3, 2, 30, 1, 7, 4, 2, 30, 3, 2, 30, 1, 7, 4, 2, 30, 3, 2, 30, 1, 7
      ]
    },
    {
      name: 'strong',
      usersVoted: [
        4, 4, 30, 18, 19, 2, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        10, 1, 18, 4, 2, 30, 3, 2, 30, 2, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19, 2, 10, 1
      ],
      data: [
        4, 18, 4, 2, 30, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 3,
        2, 30, 2, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19, 2, 10, 1, 2, 10, 19, 25, 18, 1, 18
      ]
    },
    {
      name: 'control',
      usersVoted: [
        25, 18, 25, 3, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 18, 4, 2,
        30, 3, 2, 30, 2, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19, 2, 10, 1, 2, 10, 1, 7
      ],
      data: [
        4, 2, 10, 18, 18, 4, 2, 30, 3, 2, 30, 2, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 20, 7, 2, 10, 18, 2, 20, 1, 20, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19, 2, 10, 1, 2, 10, 1, 18
      ]
    },
    {
      name: 'energy',
      usersVoted: [
        4, 2, 10, 10, 18, 10, 18, 4, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 2, 30, 3, 2, 30, 2, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19, 2, 10, 1, 1, 7
      ],
      data: [
        4, 2, 10, 19, 2, 10, 18, 4, 2, 30, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 3, 2, 30, 2, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19, 2, 10, 1, 10, 18
      ]
    },
    {
      name: 'calmness',
      usersVoted: [
        4, 2, 10, 19, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 10, 18,
        1, 18, 4, 2, 30, 3, 2, 30, 2, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19, 2, 10, 1, 18
      ],
      data: [
        4, 2, 10, 3, 2, 10, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 18, 4, 2, 30, 3, 2, 30, 2, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19, 2, 10, 1,
        18, 7
      ]
    },
    {
      name: 'relax',
      usersVoted: [
        4, 2, 10, 19, 2, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 10,
        10, 18, 4, 2, 30, 3, 2, 30, 2, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19, 2, 10, 1, 18
      ],
      data: [
        4, 10, 18, 3, 2, 10, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        18, 4, 2, 30, 3, 2, 30, 2, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19, 2, 10, 1, 1, 7
      ]
    },
    {
      name: 'balance',
      usersVoted: [
        4, 10, 18, 3, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 2, 10,
        18, 4, 2, 30, 3, 2, 30, 2, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19, 2, 10, 1, 1, 7
      ],
      data: [
        4, 10, 18, 19, 2, 10, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7,
        2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10,
        18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2,
        10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18,
        2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20,
        1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20, 20, 1,
        20, 7, 2, 10, 18, 2, 20, 1, 20, 20, 7, 2, 10, 18, 2, 20, 1, 20, 7, 2, 10, 18, 2, 20, 1, 20,
        18, 4, 2, 30, 3, 2, 30, 2, 10, 3, 2, 10, 18, 7, 4, 30, 18, 19, 2, 10, 1, 1, 18
      ]
    }
  ];

  const getFirstGraphData = (dataType) => {
    const obj = { ...getDate() };
    if (parameters.dataType === 'personal') {
      CompanyApi.getPersonalMoodsGraphData(
        obj.startDate,
        obj.endDate,
        parameters.department,
        obj.minAge,
        obj.maxAge,
        parameters.location,
        parameters.ethinicity,
        parameters.gender,
        dataType.toLowerCase(),
        props.companyId
      )
        .then((res) => {
          if (dateCategory === 'weekly') {
            setFirstGraph({
              data: dummy1,
              option: optionFirstGraph(res.data.labels, dummy1, dataType),
              label: res.data.labels
            });
            return null;
          }
          if (dateCategory === 'monthly') {
            setFirstGraph({
              data: dummy2,
              option: optionFirstGraph(res.data.labels, dummy2, dataType),
              label: res.data.labels
            });
            return null;
          }
          if (dateCategory === 'yearly') {
            setFirstGraph({
              data: dummy3,
              option: optionFirstGraph(res.data.labels, dummy3, dataType),
              label: res.data.labels
            });
            return null;
          }
          if (dateCategory === 'custom') {
            setFirstGraph({
              data: dummy2,
              option: optionFirstGraph(res.data.labels, dummy2, dataType),
              label: res.data.labels
            });
            return null;
          } else {
            setFirstGraph({
              data: res.data.moodsData,
              option: optionFirstGraph(res.data.labels, res.data.moodsData, dataType),
              label: res.data.labels
            });
          }
        })
        .catch((err) => {});
    } else if (parameters.dataType === 'professional') {
      CompanyApi.getProfessionalMoodsGraphData(
        obj.startDate,
        obj.endDate,
        parameters.department,
        obj.minAge,
        obj.maxAge,
        parameters.location,
        parameters.ethinicity,
        parameters.gender,
        dataType.toLowerCase(),
        props.companyId
      )
        .then((res) => {
          if (dateCategory === 'weekly') {
            setFirstGraph({
              data: dummy1,
              option: optionFirstGraph(res.data.labels, dummy1, dataType),
              label: res.data.labels
            });
            return null;
          }
          if (dateCategory === 'monthly') {
            setFirstGraph({
              data: dummy2,
              option: optionFirstGraph(res.data.labels, dummy2, dataType),
              label: res.data.labels
            });
            return null;
          }
          if (dateCategory === 'yearly') {
            setFirstGraph({
              data: dummy3,
              option: optionFirstGraph(res.data.labels, dummy3, dataType),
              label: res.data.labels
            });
            return null;
          }
          if (dateCategory === 'custom') {
            setFirstGraph({
              data: dummy2,
              option: optionFirstGraph(res.data.labels, dummy2, dataType),
              label: res.data.labels
            });
            return null;
          } else {
            setFirstGraph({
              data: res.data.moodsData,
              option: optionFirstGraph(res.data.labels, res.data.moodsData, dataType),
              label: res.data.labels
            });
          }
        })
        .catch((err) => {});
    } else {
      CompanyApi.getPersonalMoodsGraphData(
        obj.startDate,
        obj.endDate,
        parameters.department,
        obj.minAge,
        obj.maxAge,
        parameters.location,
        parameters.ethinicity,
        parameters.gender,
        dataType.toLowerCase(),
        props.companyId
      )
        .then((res) => {
          setFirstGraph({
            data: res.data.moodsData,
            option: optionFirstGraph(res.data.labels, res.data.moodsData, dataType),
            label: res.data.labels
          });
        })
        .catch((err) => {});

      CompanyApi.getProfessionalMoodsGraphData(
        obj.startDate,
        obj.endDate,
        parameters.department,
        obj.minAge,
        obj.maxAge,
        parameters.location,
        parameters.ethinicity,
        parameters.gender,
        dataType.toLowerCase(),
        props.companyId
      )
        .then((res) => {
          setFirstGraphAlternate({
            data: res.data.moodsData,
            option: optionFirstGraph(res.data.labels, res.data.usersCount, dataType),
            label: res.data.labels
          });
        })
        .catch((err) => {});
    }
  };

  const getSecondGraphData = () => {
    CompanyApi.getSecondCompanyGraphData(userData.id).then((res) => {});
  };

  const getFilterData = () => {
    setLoader(true);
    CompanyApi.getFilterData(state?._id ? state._id : userData.companyId)
      .then((res) => {
        setLoader(false);
        setFilterData(res.data);
      })
      .catch((err) => {
        setLoader(false);
      });
  };

  const getOverAllScore = () => {
    const obj = { ...getDate() };
    CompanyApi.getOverallScore(
      obj.startDate,
      obj.endDate,
      parameters.department,
      obj.minAge,
      obj.maxAge,
      parameters.location,
      parameters.ethinicity,
      parameters.gender,
      parameters.dataType === '' ? null : parameters.dataType === 'personal' ? 1 : 2,
      props.companyId
    )
      .then((res) => {
        let mood = parseInt(res.data.overallMoodPercentage);
        setMoodPercentage(mood);
        if (mood < -50) {
          setOverallMood('Very Poor');
        } else if (mood < -1 && mood > -50) {
          setOverallMood('Poor');
        } else if (mood === 0) {
          setOverallMood('Average');
        } else if (mood < 1 && mood > 50) {
          setOverallMood('Good');
        } else if (mood < 50) {
          setOverallMood('Very Good');
        }
        // setOverallMood(res.data.overallMood);
        setFirstGraphMoodsAverage({
          positive: res.data.positiveScore,
          negative: res.data.negativeScore
        });
      })
      .catch((err) => {});
  };

  useOutsideClick(wrapperRef, () => {
    if (model.datePickerVisible)
      setModel({ ...model, datePickerVisible: !model.datePickerVisible });
  });

  useEffect(() => {
    getFilterData();
    getSecondGraphData();
  }, []);

  useEffect(() => {
    getOverAllScore();
    getFirstGraphData(graphDataType.firstGrapgh);
  }, [parameters]);

  const handleRadialMood = (e) => {
    if (e.target.name === 'moodSelectRadialAlternate') {
      setRadialMoodAlternate(e.target.value);
      return;
    }

    setRadialMood(e.target.value);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    if (name === 'dateCriteria' && value === '4') {
      setParameters({ ...parameters, [name]: value });
      setModel({ ...model, dateButtonVisible: true });
    } else if (name === 'dataType') {
      if (value === 'professional') {
        setRadialMood(redialProfestionalSelect[0].value.toLowerCase());
        setParameters({ ...parameters, [name]: value });
      } else if (value === 'personal') {
        setRadialMood(redialPersonalSelect[0].toLowerCase());
        setParameters({ ...parameters, [name]: value });
      } else {
        setParameters({ ...parameters, [name]: value });
      }
    } else {
      setParameters({ ...parameters, [name]: value });
      setModel({ ...model, dateButtonVisible: false });
    }

    if (name === 'dateCriteria' && value !== '4') {
      const today = new Date();
      const currentDay = today.getDay();

      const startOfWeek = new Date(today);
      const endOfWeek = new Date(today);

      const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
      const lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);

      const firstDayOfYear = new Date(today.getFullYear(), 0, 1);
      const lastDayOfYear = new Date(today.getFullYear(), 11, 31);

      if (value === '1') {
        startOfWeek.setDate(today.getDate() - currentDay);
        endOfWeek.setDate(today.getDate() + (6 - currentDay));
      } else if (value === '2') {
        setParameters({
          ...parameters,
          startDate: firstDayOfMonth,
          endDate: lastDayOfMonth
        });
      } else {
        setParameters({
          ...parameters,
          startDate: firstDayOfYear,
          endDate: lastDayOfYear
        });
      }
    }
  };

  const handleSelectRange = (e) => {
    let start = new Date(e?.selection?.startDate);
    start.setHours(new Date().getHours());
    start.setMinutes(new Date().getMinutes());
    start.setSeconds(new Date().getSeconds());
    let end = new Date(e?.selection?.endDate);
    end.setHours(new Date().getHours());
    end.setMinutes(new Date().getMinutes());
    end.setSeconds(new Date().getSeconds());
    setParameters({
      ...parameters,
      startDate: start,
      endDate: end,
      datePickerVisible: false,
      dateChanged: true
    });
  };

  const changeGraphOption = (type, name) => {
    if (name === 'firstGrapgh') {
      getFirstGraphData(type);
    } else if (name === 'secondGrapgh') {
      if (type === 'All') {
        setSecondGraph(allBarOptions);
      } else if (type === 'Positive') {
        setSecondGraph(positiveBarOption);
      } else if (type === 'Negative') {
        setSecondGraph(negativeBarOption);
      }
    }
    setGraphDataType({ ...graphDataType, [name]: type });
  };

  const getSolutionData = (avgPositive, avgNegative, graphName) => {
    setLoader(true);
    const obj = { ...getDate() };
    CompanyApi.getSolutionByFilters(
      obj.startDate,
      obj.endDate,
      obj.minAge,
      obj.maxAge,
      parameters.department,
      parameters.location,
      parameters.gender,
      graphDataType.firstGrapgh,
      parameters.dataType,
      parameters.ethinicity,
      graphName
    ).then((res) => {
      if (res) {
        setLoader(false);
        solutionData(avgPositive, avgNegative, '', parameters.dataType, graphName);
      } else {
        setLoader(false);
        solutionData(avgPositive, avgNegative, '', parameters.dataType, graphName);
      }
    });
  };

  const solutionData = (avgPositive, avgNegative, oldSolution, type, graphName) => {
    let total = Math.abs(avgPositive) + Math.abs(avgNegative);
    const obj = { ...getDate() };
    const requestOptions = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        deviceType: 1,
        authorization: `Bearer ${token}`
      },
      body: JSON.stringify({
        avgPositive: (Math.abs(avgPositive) / total) * 100,
        avgNegative: (Math.abs(avgNegative) / total) * 100,
        oldSolution: oldSolution ? oldSolution : '',
        businessType: userData.companyType ? userData.companyType : '',
        filters: {
          department: userData.companyType ? userData.companyType : '',
          type: type
        }
      })
    };
    if (obj.minAge && obj.maxAge) requestOptions.filters.age = obj.minAge + '-' + obj.maxAge;
    setLoader(true);
    fetch('https://api.shoorah.io/api/v1/openai', requestOptions)
      .then((response) => response.json())
      .then((data) => {
        setLoader(false);
        // convertLargeTextToPDF(`${graphName}\n\n${data?.data}`, "solution.pdf");
        addSolution(
          (Math.abs(avgPositive) / total) * 100,
          (Math.abs(avgNegative) / total) * 100,
          data?.data,
          graphName
        );
      })
      .catch((error) => {
        setLoader(false);
        errorToast('Something went wrong !');
      });
  };

  const addSolution = (avgPositive, avgNegative, solutionText, graphName) => {
    const obj = { ...getDate() };
    const solution = {
      startDate: obj.startDate,
      endDate: obj.endDate,
      minAge: obj.minAge,
      maxAge: obj.maxAge,
      ethnicity: parameters.ethinicity,
      department: userData.companyType,
      location: parameters.location,
      gender: parameters.gender,
      dataType: graphDataType.firstGrapgh,
      solutionData: solutionText,
      averagePositive: avgPositive,
      averageNegative: avgNegative,
      graphName: graphName
    };
    setLoader(true);
    CompanyApi.addSolutionData(solution)
      .then((res) => {
        setLoader(false);
      })
      .catch((err) => {
        setLoader(false);
      });
  };

  const downloadDocReport = async (mood, label, graphName, type, moodName, isnewModeOfPdf) => {
    setLoader(true);
    const obj = { ...getDate() };
    const data = {
      moodData: mood,
      label: label,
      graphName: graphName,
      startDate: obj.startDate,
      endDate: obj.endDate,
      minAge: obj.minAge,
      maxAge: obj.maxAge,
      department: parameters.department,
      location: parameters.location,
      gender: parameters.gender,
      dataType: graphDataType.firstGrapgh,
      emotionType: parameters.dataType,
      ethnicity: parameters.ethinicity
    };
    if (type === 'CSV') {
      if (graphName === 'Overall Well-being & Mental Health') {
        downloadOWBMHReportToCSV({ series: mood, label: label }, 'OWB&MH.csv');
        data.graphType = 1;
      }
      if (graphName === 'Single Mood Graph') {
        downloadSingleRadialReportToCSV(
          { series: mood, label: label },
          'SingleMoodGraph.csv',
          moodName
        );
        data.graphType = 3;
        data.moodName = moodName;
      }
    }
    if (type === 'PDF') {
      if (graphName === 'Overall Well-being & Mental Health') {
        downloadOWBMHReportToPDF({ series: mood, label: label }, 'OWB&MH.pdf');
        data.graphType = 1;
      }
      if (graphName === 'Single Mood Graph') {
        // downloadSingleRadialReportToPDF(
        //   { series: mood, label: label },
        //   "SingleMoodGraph.pdf",
        //   moodName
        // );
        data.graphType = 3;
        data.moodName = moodName;
      }
    }

    const url = `${API_BASE_URL}company/v1/add-report`;
    await axios
      .post(url, data, {
        headers: {
          deviceType: 3,
          Authorization: getJWTToken()
        },
        responseType: 'blob'
      })
      .then((res) => {
        if (isnewModeOfPdf) {
          const blob = new Blob([res.data], { type: 'application/pdf' });
          const url = window.URL.createObjectURL(blob);

          const a = document.createElement('a');
          a.href = url;
          a.download = `${data?.moodName}.pdf`; // Specify the filename
          a.click();
          window.URL.revokeObjectURL(url);
        }
      })
      .catch((err) => {});
    setLoader(false);
  };

  return (
    <div>
      {loader ? <Loader /> : null}
      {/* graph filters */}
      <div className="grid gap-4 lg:grid-cols-4 lg:grid-cols-4 sm:grid-cols-2">
        <div className="flex items-center justify-between">
          <select
            className={`border text-[#666666] bg-white rounded-md ${
              parameters.dateCriteria === '4' ? 'w-4/5' : 'w-full'
            } h-10 px-2`}
            value={parameters.dateCriteria}
            onChange={handleChange}
            id="dateCriteria"
            name="dateCriteria"
          >
            <option value={''} disabled>
              Select Date Criteria
            </option>
            {DATECREITERIA.map((e, i) => (
              <option key={i} value={e.value}>
                {e.name}
              </option>
            ))}
          </select>
          {model.dateButtonVisible && (
            <button
              className={`inline-flex items-center justify-center rounded-3xl border text-black ${
                parameters.dateCriteria === '4' ? 'w-1/5' : ''
              } px-2 py-1 text-xs font-medium shadow-sm hover:shoorah-primary focus:outline-none sm:w-auto`}
              onClick={() =>
                setModel({
                  ...model,
                  datePickerVisible: !model.datePickerVisible
                })
              }
            >
              <CalendarIcon className="w-[18px] h-[20px] inline" />
            </button>
          )}
        </div>
        {model.datePickerVisible && (
          <Transition
            show={model.datePickerVisible}
            as={Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <div
              className="absolute lg:right-[2rem] sm:right-[2rem] z-[2] mt-2 mx-auto lg:left-0 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none w-fit"
              ref={wrapperRef}
            >
              <DateRangePicker
                ranges={[
                  {
                    startDate: parameters?.startDate ? parameters?.startDate : new Date(),
                    endDate: parameters?.endDate ? parameters?.endDate : new Date(),
                    key: 'selection'
                  }
                ]}
                onChange={handleSelectRange}
                maxDate={new Date()}
              />
            </div>
          </Transition>
        )}
        <select
          className="border text-[#666666] bg-white rounded-md h-10 px-2"
          value={parameters.location}
          onChange={handleChange}
          id="location"
          name="location"
        >
          <option value={''}>All Locations</option>
          {filterData?.countries.map((e, i) => (
            <option key={i} value={e.toLowerCase()}>
              {e}
            </option>
          ))}
        </select>
        <select
          className="border text-[#666666] bg-white rounded-md h-10 px-2"
          value={parameters.department}
          onChange={handleChange}
          id="department"
          name="department"
        >
          <option value={''}>All Department</option>
          {filterData?.departments.map((e, i) => (
            <option key={i} value={e.toLowerCase()}>
              {e}
            </option>
          ))}
        </select>
        <select
          className="border text-[#666666] bg-white rounded-md h-10 px-2"
          value={parameters.dataType}
          onChange={handleChange}
          id="dataType"
          name="dataType"
        >
          <option value={''}>All Emotions</option>
          <option value={'personal'}>Personal Emotions</option>
          <option value={'professional'}>Professional Emotions</option>
        </select>
        <select
          className="border text-[#666666] bg-white rounded-md h-10 px-2"
          value={parameters.age}
          onChange={handleChange}
          id="age"
          name="age"
        >
          <option value={''}>All Ages</option>
          {AGERANGE.map((e, i) => (
            <option key={i} value={e.value}>
              {e.name}
            </option>
          ))}
        </select>
        <select
          className="border text-[#666666] bg-white rounded-md h-10 px-2"
          value={parameters.ethinicity}
          onChange={handleChange}
          id="ethinicity"
          name="ethinicity"
        >
          <option value={''}>All Ethinicities</option>
          {filterData?.ethnicities.map((e, i) => (
            <option key={i} value={e.toLowerCase()}>
              {e}
            </option>
          ))}
        </select>
        <select
          className="border text-[#666666] bg-white rounded-md h-10 px-2"
          value={parameters.gender}
          onChange={handleChange}
          id="gender"
          name="gender"
        >
          <option value={''}>All Genders</option>
          {GENDER.map((e, i) => (
            <option key={i} value={e.value}>
              {e.name}
            </option>
          ))}
        </select>
      </div>

      {/* Overall score */}
      <div className="bg-gradient-to-r relative from-shoorah-primary to-shoorah-secondary rounded-md py-2 my-5 text-center font-medium	">
        <p className="flex justify-center items-center text-white">
          Your Overall Score : {overallMood.toUpperCase()}&nbsp;
          {overallMood !== '' && (
            <span>
              {overallMood === 'Very Good' || overallMood === 'Good' ? (
                <img className="w-8 h-8" loading='lazy' src={happyImg} alt="happy" />
              ) : overallMood === 'Average' ? (
                <img className="w-8 h-8" loading='lazy' src={neutralImg} alt="average" />
              ) : overallMood === 'Very Poor' || overallMood === 'Poor' ? (
                <img className="w-8 h-8" loading='lazy' src={sadImg} alt="sad" />
              ) : (
                ''
              )}
            </span>
          )}
          {/* <span className="ml-2">{"(" + moodPercentage + ")"}</span> */}
        </p>
        {/* Complete Report */}
        <div className=" absolute right-2 top-1/2 -translate-y-1/2 ">
          <Popover className="relative">
            {({ open }) => (
              <>
                <Popover.Button
                  className={`
                ${open ? '' : 'text-opacity-90'}
                inline-flex items-center justify-center rounded-md border border-transparent bg-shoorah-offWhite px-2 py-1 text-xs font-medium text-white shadow-sm hover:shoorah-primary focus:outline-none sm:w-auto`}
                >
                  <svg
                    width="18"
                    height="18"
                    viewBox="0 0 14 16"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      className="fill-shoorah-secondary"
                      d="M11.9375 0.876719H10.1773C9.71287 0.340281 9.02837 0 8.26562 0H5.73438C4.97162 0 4.28712 0.340281 3.82266 0.876719H2.0625C1.28709 0.876719 0.65625 1.50881 0.65625 2.28572V14.591C0.65625 15.3679 1.28709 16 2.0625 16H11.9375C12.7129 16 13.3438 15.3679 13.3438 14.591V2.28572C13.3438 1.50878 12.7129 0.876719 11.9375 0.876719ZM5.73438 0.939344H8.26562C8.98991 0.939344 9.59141 1.42419 9.78906 2.06653H4.21094C4.40825 1.42531 5.00897 0.939344 5.73438 0.939344ZM12.4062 14.591C12.4062 14.85 12.196 15.0607 11.9375 15.0607H2.0625C1.80403 15.0607 1.59375 14.85 1.59375 14.591V2.28572C1.59375 2.02675 1.80403 1.81606 2.0625 1.81606H3.30769C3.23834 2.04983 3.20312 2.29238 3.20312 2.53622C3.20312 2.79559 3.413 3.00588 3.67188 3.00588H10.3281C10.587 3.00588 10.7969 2.79559 10.7969 2.53622C10.7969 2.29238 10.7617 2.04983 10.6923 1.81606H11.9375C12.196 1.81606 12.4062 2.02675 12.4062 2.28572V14.591Z"
                    />
                  </svg>
                </Popover.Button>
                <Transition
                  as={Fragment}
                  enter="transition ease-out duration-200"
                  enterFrom="opacity-0 translate-y-1"
                  enterTo="opacity-100 translate-y-0"
                  leave="transition ease-in duration-150"
                  leaveFrom="opacity-100 translate-y-0"
                  leaveTo="opacity-0 translate-y-1"
                >
                  <Popover.Panel className="bg-white rounded-md border absolute left-0 z-10 mt-3 w-screen max-w-[8.4rem] font-normal -translate-x-full -translate-y-4 text-base transform">
                    <p
                      className="px-1 py-2 hover:bg-gray-300 rounded-md cursor-pointer"
                      // todo: APi integration
                      onClick={() =>
                        downloadDocReport(
                          firstGraph.data,
                          firstGraph.label,
                          'Overall Well-being & Mental Health',
                          'CSV'
                        )
                      }
                    >
                      Download CSV
                    </p>
                    <p
                      className="px-1 py-2 hover:bg-gray-300 rounded-md cursor-pointer"
                      onClick={async () => {
                        // todo: APi integration

                        if (parameters.dataType === '') {
                          await downloadDocReport(
                            firstGraph.data,
                            firstGraph.label,
                            'Overall Well-being & Mental Health',
                            'PDF'
                          );
                          await downloadDocReport(
                            firstGraphAlternate.data,
                            firstGraphAlternate.label,
                            'Overall Well-being & Mental Health',
                            'PDF'
                          );
                          return;
                        }
                        downloadDocReport(
                          firstGraph.data,
                          firstGraph.label,
                          'Overall Well-being & Mental Health',
                          'PDF'
                        );
                      }}
                    >
                      Download PDF
                    </p>
                  </Popover.Panel>
                </Transition>
              </>
            )}
          </Popover>
        </div>
      </div>

      {/* first graph */}
      <div className="bg-white rounded-md py-2">
        <div className="flex justify-between items-center py-2 px-2">
          <div className="border p-1 rounded">
            <button
              className={`text-xs rounded px-5 py-1 ${
                graphDataType.firstGrapgh === 'All' ? 'border bg-[#888BEB] text-white' : ''
              }`}
              onClick={() => changeGraphOption('All', 'firstGrapgh')}
            >
              All
            </button>
            <button
              className={`text-xs rounded px-5 py-1 ${
                graphDataType.firstGrapgh === 'Positive' ? 'border bg-[#888BEB] text-white' : ''
              }`}
              onClick={() => changeGraphOption('Positive', 'firstGrapgh')}
            >
              Positive
            </button>
            <button
              className={`text-xs rounded px-5 py-1 ${
                graphDataType.firstGrapgh === 'Negative' ? 'border bg-[#888BEB] text-white' : ''
              }`}
              onClick={() => changeGraphOption('Negative', 'firstGrapgh')}
            >
              Negative
            </button>
          </div>
          <div>
            <p className="font-medium text-[18px]">Overall Well-being & Mental Health</p>
          </div>
          <div>
            {!props.companyId && (
              <div className="flex">
                <button
                  className="inline-flex items-center justify-center rounded-md mr-2 border border-transparent bg-gradient-to-r from-shoorah-primary to-shoorah-secondary px-2 py-1 text-xs font-medium text-white shadow-sm hover:shoorah-primary focus:outline-none sm:w-auto"
                  onClick={() =>
                    getSolutionData(
                      firstGraphMoodsAverage.positive,
                      firstGraphMoodsAverage.negative,
                      'Overall-Well-being-Mental-Health'
                    )
                  }
                >
                  <svg
                    width="18"
                    height="18"
                    viewBox="0 0 18 7"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M16.001 3.58326H16.501V4.08326V5.83297C16.501 5.87895 16.5383 5.91622 16.5843 5.91622C16.6303 5.91622 16.6675 5.87893 16.6675 5.83301V3.50005C16.6675 3.45407 16.6302 3.4168 16.5843 3.4168H7.78319H7.36061L7.29018 3.00013C7.07744 1.74147 6.09133 0.755343 4.83262 0.542571C3.19925 0.266472 1.65133 1.36677 1.37527 3.00013C1.0992 4.6335 2.1995 6.18142 3.83285 6.45749L3.83286 6.45749C5.46622 6.73359 7.01412 5.6333 7.29022 3.99993L7.36065 3.58326H7.78322H13.0848H13.5848V4.08326V5.83297C13.5848 5.87895 13.6221 5.91622 13.6681 5.91622C13.714 5.91622 13.7513 5.87895 13.7513 5.83297V4.08326V3.58326H14.2513H16.001ZM1.50334 3.50005C1.50334 1.93544 2.77169 0.667089 4.33629 0.667089C5.9009 0.667089 7.16925 1.93544 7.16925 3.50005C7.16925 5.06465 5.9009 6.33301 4.33629 6.33301C2.77169 6.33301 1.50334 5.06465 1.50334 3.50005Z"
                      fill="#E5EAF9"
                      stroke="#E5EAF9"
                    />
                  </svg>
                </button>
                <Popover className="relative">
                  {({ open }) => (
                    <>
                      <Popover.Button
                        className={`
                ${open ? '' : 'text-opacity-90'}
                inline-flex items-center justify-center rounded-md border border-transparent bg-gradient-to-r from-shoorah-primary to-shoorah-secondary px-2 py-1 text-xs font-medium text-white shadow-sm hover:shoorah-primary focus:outline-none sm:w-auto`}
                      >
                        <svg
                          width="18"
                          height="18"
                          viewBox="0 0 14 16"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M11.9375 0.876719H10.1773C9.71287 0.340281 9.02837 0 8.26562 0H5.73438C4.97162 0 4.28712 0.340281 3.82266 0.876719H2.0625C1.28709 0.876719 0.65625 1.50881 0.65625 2.28572V14.591C0.65625 15.3679 1.28709 16 2.0625 16H11.9375C12.7129 16 13.3438 15.3679 13.3438 14.591V2.28572C13.3438 1.50878 12.7129 0.876719 11.9375 0.876719ZM5.73438 0.939344H8.26562C8.98991 0.939344 9.59141 1.42419 9.78906 2.06653H4.21094C4.40825 1.42531 5.00897 0.939344 5.73438 0.939344ZM12.4062 14.591C12.4062 14.85 12.196 15.0607 11.9375 15.0607H2.0625C1.80403 15.0607 1.59375 14.85 1.59375 14.591V2.28572C1.59375 2.02675 1.80403 1.81606 2.0625 1.81606H3.30769C3.23834 2.04983 3.20312 2.29238 3.20312 2.53622C3.20312 2.79559 3.413 3.00588 3.67188 3.00588H10.3281C10.587 3.00588 10.7969 2.79559 10.7969 2.53622C10.7969 2.29238 10.7617 2.04983 10.6923 1.81606H11.9375C12.196 1.81606 12.4062 2.02675 12.4062 2.28572V14.591Z"
                            fill="#E5EAF9"
                          />
                        </svg>
                      </Popover.Button>
                      <Transition
                        as={Fragment}
                        enter="transition ease-out duration-200"
                        enterFrom="opacity-0 translate-y-1"
                        enterTo="opacity-100 translate-y-0"
                        leave="transition ease-in duration-150"
                        leaveFrom="opacity-100 translate-y-0"
                        leaveTo="opacity-0 translate-y-1"
                      >
                        <Popover.Panel className="bg-white rounded-md border absolute left-3/4 z-10 mt-3 w-screen max-w-[15rem] -translate-x-1/2 transform">
                          <p
                            className="px-1 py-2 hover:bg-gray-300 rounded-md cursor-pointer"
                            onClick={() =>
                              downloadDocReport(
                                firstGraph.data,
                                firstGraph.label,
                                'Overall Well-being & Mental Health',
                                'CSV'
                              )
                            }
                          >
                            Download CSV
                          </p>
                          <p
                            className="px-1 py-2 hover:bg-gray-300 rounded-md cursor-pointer"
                            onClick={async () => {
                              if (parameters.dataType === '') {
                                await downloadDocReport(
                                  firstGraph.data,
                                  firstGraph.label,
                                  'Overall Well-being & Mental Health',
                                  'PDF'
                                );
                                await downloadDocReport(
                                  firstGraphAlternate.data,
                                  firstGraphAlternate.label,
                                  'Overall Well-being & Mental Health',
                                  'PDF'
                                );
                                return;
                              }
                              downloadDocReport(
                                firstGraph.data,
                                firstGraph.label,
                                'Overall Well-being & Mental Health',
                                'PDF'
                              );
                            }}
                          >
                            Download PDF
                          </p>
                        </Popover.Panel>
                      </Transition>
                    </>
                  )}
                </Popover>
              </div>
            )}
          </div>
        </div>
        <div className="my-3">
          {parameters.dataType === '' && (
            <p className="font-medium text-[18px] ml-8">Personal Emotions</p>
          )}
          <div className="px-10 pt-5">
            <ReactApexChart
              options={firstGraph.option}
              series={firstGraph.data}
              type="line"
              width={'100%'}
              height={350}
            />
          </div>
          {parameters.dataType === '' && (
            <>
              <p className="font-medium text-[18px] ml-8 mt-8">Professional Emotions</p>
              <div className="px-10 pt-5">
                <ReactApexChart
                  options={firstGraphAlternate.option}
                  series={firstGraphAlternate.data}
                  type="line"
                  width={'100%'}
                  height={350}
                />
              </div>
            </>
          )}
        </div>
      </div>

      {/* Second Graph */}
      <div className="bg-white my-5 rounded-md py-2">
        <div className="flex justify-between items-center py-2 px-2">
          <div className="border p-1 rounded">
            <button
              className={`text-xs rounded px-5 py-1 ${
                graphDataType.secondGrapgh === 'All' ? 'border bg-[#888BEB] text-white' : ''
              }`}
              onClick={() => changeGraphOption('All', 'secondGrapgh')}
            >
              All
            </button>
            <button
              className={`text-xs rounded px-5 py-1 ${
                graphDataType.secondGrapgh === 'Positive' ? 'border bg-[#888BEB] text-white' : ''
              }`}
              onClick={() => changeGraphOption('Positive', 'secondGrapgh')}
            >
              Positive
            </button>
            <button
              className={`text-xs rounded px-5 py-1 ${
                graphDataType.secondGrapgh === 'Negative' ? 'border bg-[#888BEB] text-white' : ''
              }`}
              onClick={() => changeGraphOption('Negative', 'secondGrapgh')}
            >
              Negative
            </button>
          </div>
          <div>
            <p className="font-medium text-[18px]">Shuru Therapy & Journal Keywords</p>
          </div>
          <div>
            {!props.companyId && (
              <div>
                <button
                  className="inline-flex items-center justify-center rounded-md mr-2 border border-transparent bg-gradient-to-r from-shoorah-primary to-shoorah-secondary px-2 py-1 text-xs font-medium text-white shadow-sm hover:shoorah-primary focus:outline-none sm:w-auto"
                  // onClick={() => setShowFilterModal((state) => !state)}
                >
                  <svg
                    width="18"
                    height="18"
                    viewBox="0 0 18 7"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M16.001 3.58326H16.501V4.08326V5.83297C16.501 5.87895 16.5383 5.91622 16.5843 5.91622C16.6303 5.91622 16.6675 5.87893 16.6675 5.83301V3.50005C16.6675 3.45407 16.6302 3.4168 16.5843 3.4168H7.78319H7.36061L7.29018 3.00013C7.07744 1.74147 6.09133 0.755343 4.83262 0.542571C3.19925 0.266472 1.65133 1.36677 1.37527 3.00013C1.0992 4.6335 2.1995 6.18142 3.83285 6.45749L3.83286 6.45749C5.46622 6.73359 7.01412 5.6333 7.29022 3.99993L7.36065 3.58326H7.78322H13.0848H13.5848V4.08326V5.83297C13.5848 5.87895 13.6221 5.91622 13.6681 5.91622C13.714 5.91622 13.7513 5.87895 13.7513 5.83297V4.08326V3.58326H14.2513H16.001ZM1.50334 3.50005C1.50334 1.93544 2.77169 0.667089 4.33629 0.667089C5.9009 0.667089 7.16925 1.93544 7.16925 3.50005C7.16925 5.06465 5.9009 6.33301 4.33629 6.33301C2.77169 6.33301 1.50334 5.06465 1.50334 3.50005Z"
                      fill="#E5EAF9"
                      stroke="#E5EAF9"
                    />
                  </svg>
                </button>
                <button
                  className="inline-flex items-center justify-center rounded-md border border-transparent bg-gradient-to-r from-shoorah-primary to-shoorah-secondary px-2 py-1 text-xs font-medium text-white shadow-sm hover:shoorah-primary focus:outline-none sm:w-auto"
                  // onClick={() => setShowFilterModal((state) => !state)}
                >
                  <svg
                    width="18"
                    height="18"
                    viewBox="0 0 14 16"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M11.9375 0.876719H10.1773C9.71287 0.340281 9.02837 0 8.26562 0H5.73438C4.97162 0 4.28712 0.340281 3.82266 0.876719H2.0625C1.28709 0.876719 0.65625 1.50881 0.65625 2.28572V14.591C0.65625 15.3679 1.28709 16 2.0625 16H11.9375C12.7129 16 13.3438 15.3679 13.3438 14.591V2.28572C13.3438 1.50878 12.7129 0.876719 11.9375 0.876719ZM5.73438 0.939344H8.26562C8.98991 0.939344 9.59141 1.42419 9.78906 2.06653H4.21094C4.40825 1.42531 5.00897 0.939344 5.73438 0.939344ZM12.4062 14.591C12.4062 14.85 12.196 15.0607 11.9375 15.0607H2.0625C1.80403 15.0607 1.59375 14.85 1.59375 14.591V2.28572C1.59375 2.02675 1.80403 1.81606 2.0625 1.81606H3.30769C3.23834 2.04983 3.20312 2.29238 3.20312 2.53622C3.20312 2.79559 3.413 3.00588 3.67188 3.00588H10.3281C10.587 3.00588 10.7969 2.79559 10.7969 2.53622C10.7969 2.29238 10.7617 2.04983 10.6923 1.81606H11.9375C12.196 1.81606 12.4062 2.02675 12.4062 2.28572V14.591Z"
                      fill="#E5EAF9"
                    />
                  </svg>
                </button>
              </div>
            )}
          </div>
        </div>
        <div className="my-3">
          <div className="px-10">
            <Chart
              options={secondGraph.option}
              series={secondGraph.series}
              type="bar"
              width={'100%'}
              height={320}
            />
          </div>
        </div>
      </div>

      {/* Third Graph */}
      <div className="bg-white rounded-md py-2 flex w-full items-center justify-center">
        {parameters.dataType !== '' ? (
          <div>
            <div className="flex justify-center flex-col items-center">
              <div className="">
                <select
                  className="border text-[#666666] border-[#F1F2F4] rounded-md h-10 px-2 w-full"
                  id="moodSelectRadial"
                  name="moodSelectRadial"
                  onChange={handleRadialMood}
                >
                  {/* <option value={""} disabled>
                  Select {graphDataType.thirdGrapgh}
                </option> */}
                  {parameters.dataType !== 'personal'
                    ? redialProfestionalSelect.map((e, i) => (
                        <option key={i} value={e.value}>
                          {e.name}
                        </option>
                      ))
                    : redialPersonalSelect.map((e, i) => (
                        <option key={i} value={e.toLowerCase()}>
                          {e}
                        </option>
                      ))}
                </select>
              </div>
            </div>
            <div className="my-3 flex justify-center">
              <div className="p-5 max-w-fit mx-10 bg-[#F7F7F8] rounded-md">
                <div>
                  {!props.companyId && (
                    <div className="flex justify-between">
                      <button
                        className="inline-flex items-center justify-center rounded-md mr-2 border border-transparent bg-gradient-to-r from-shoorah-primary to-shoorah-secondary px-2 py-1 text-xs font-medium text-white shadow-sm hover:shoorah-primary focus:outline-none sm:w-auto"
                        onClick={() =>
                          getSolutionData(
                            thirdGraphMoodsAverage.positive,
                            thirdGraphMoodsAverage.negative,
                            `${radialMood.toUpperCase()} Mood Graph`
                          )
                        }
                      >
                        <svg
                          width="18"
                          height="18"
                          viewBox="0 0 18 7"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M16.001 3.58326H16.501V4.08326V5.83297C16.501 5.87895 16.5383 5.91622 16.5843 5.91622C16.6303 5.91622 16.6675 5.87893 16.6675 5.83301V3.50005C16.6675 3.45407 16.6302 3.4168 16.5843 3.4168H7.78319H7.36061L7.29018 3.00013C7.07744 1.74147 6.09133 0.755343 4.83262 0.542571C3.19925 0.266472 1.65133 1.36677 1.37527 3.00013C1.0992 4.6335 2.1995 6.18142 3.83285 6.45749L3.83286 6.45749C5.46622 6.73359 7.01412 5.6333 7.29022 3.99993L7.36065 3.58326H7.78322H13.0848H13.5848V4.08326V5.83297C13.5848 5.87895 13.6221 5.91622 13.6681 5.91622C13.714 5.91622 13.7513 5.87895 13.7513 5.83297V4.08326V3.58326H14.2513H16.001ZM1.50334 3.50005C1.50334 1.93544 2.77169 0.667089 4.33629 0.667089C5.9009 0.667089 7.16925 1.93544 7.16925 3.50005C7.16925 5.06465 5.9009 6.33301 4.33629 6.33301C2.77169 6.33301 1.50334 5.06465 1.50334 3.50005Z"
                            fill="#E5EAF9"
                            stroke="#E5EAF9"
                          />
                        </svg>
                      </button>
                      <Popover className="relative">
                        {({ open }) => (
                          <>
                            <Popover.Button
                              className={`
                ${open ? '' : 'text-opacity-90'}
                inline-flex items-center justify-center rounded-md border border-transparent bg-gradient-to-r from-shoorah-primary to-shoorah-secondary px-2 py-1 text-xs font-medium text-white shadow-sm hover:shoorah-primary focus:outline-none sm:w-auto`}
                            >
                              <svg
                                width="18"
                                height="18"
                                viewBox="0 0 14 16"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M11.9375 0.876719H10.1773C9.71287 0.340281 9.02837 0 8.26562 0H5.73438C4.97162 0 4.28712 0.340281 3.82266 0.876719H2.0625C1.28709 0.876719 0.65625 1.50881 0.65625 2.28572V14.591C0.65625 15.3679 1.28709 16 2.0625 16H11.9375C12.7129 16 13.3438 15.3679 13.3438 14.591V2.28572C13.3438 1.50878 12.7129 0.876719 11.9375 0.876719ZM5.73438 0.939344H8.26562C8.98991 0.939344 9.59141 1.42419 9.78906 2.06653H4.21094C4.40825 1.42531 5.00897 0.939344 5.73438 0.939344ZM12.4062 14.591C12.4062 14.85 12.196 15.0607 11.9375 15.0607H2.0625C1.80403 15.0607 1.59375 14.85 1.59375 14.591V2.28572C1.59375 2.02675 1.80403 1.81606 2.0625 1.81606H3.30769C3.23834 2.04983 3.20312 2.29238 3.20312 2.53622C3.20312 2.79559 3.413 3.00588 3.67188 3.00588H10.3281C10.587 3.00588 10.7969 2.79559 10.7969 2.53622C10.7969 2.29238 10.7617 2.04983 10.6923 1.81606H11.9375C12.196 1.81606 12.4062 2.02675 12.4062 2.28572V14.591Z"
                                  fill="#E5EAF9"
                                />
                              </svg>
                            </Popover.Button>
                            <Transition
                              as={Fragment}
                              enter="transition ease-out duration-200"
                              enterFrom="opacity-0 translate-y-1"
                              enterTo="opacity-100 translate-y-0"
                              leave="transition ease-in duration-150"
                              leaveFrom="opacity-100 translate-y-0"
                              leaveTo="opacity-0 translate-y-1"
                            >
                              <Popover.Panel className="bg-white rounded-md border absolute left-3/4 z-10 mt-3 w-screen max-w-[15rem] -translate-x-1/2 transform">
                                <p
                                  className="px-1 py-2 hover:bg-gray-300 rounded-md cursor-pointer"
                                  onClick={() =>
                                    downloadDocReport(
                                      thirdGraph.data,
                                      thirdGraph.option.labels,
                                      'Single Mood Graph',
                                      'CSV',
                                      radialMood
                                    )
                                  }
                                >
                                  Download CSV
                                </p>
                                <p
                                  className="px-1 py-2 hover:bg-gray-300 rounded-md cursor-pointer"
                                  onClick={() =>
                                    downloadDocReport(
                                      thirdGraph.data,
                                      thirdGraph.option.labels,
                                      `Single Mood Graph`,
                                      'PDF',
                                      radialMood,
                                      true
                                    )
                                  }
                                >
                                  Download PDF
                                </p>
                              </Popover.Panel>
                            </Transition>
                          </>
                        )}
                      </Popover>
                    </div>
                  )}
                </div>
                <ReactApexChart
                  options={thirdGraph.option}
                  series={thirdGraph.data}
                  type="radialBar"
                  width={'100%'}
                  height={390}
                />
              </div>
            </div>
          </div>
        ) : (
          <>
            {' '}
            <div>
              <div className="flex justify-center flex-col items-center">
                {parameters.dataType === '' && (
                  <div className="font-medium text-[18px] my-4">Personal Emotions</div>
                )}
                <div className="">
                  <select
                    className="border text-[#666666] border-[#F1F2F4] rounded-md h-10 px-2 w-full"
                    id="moodSelectRadial"
                    name="moodSelectRadial"
                    onChange={handleRadialMood}
                  >
                    {/* <option value={""} disabled>
                  Select {graphDataType.thirdGrapgh}
                </option> */}
                    {redialPersonalSelect.map((e, i) => (
                      <option key={i} value={e.toLowerCase()}>
                        {e}
                      </option>
                    ))}
                  </select>
                </div>
              </div>
              <div className="my-3 flex justify-center">
                <div className="p-5 max-w-fit mx-10 bg-[#F7F7F8] rounded-md">
                  <div>
                    {!props.companyId && (
                      <div className="flex justify-between">
                        <button
                          className="inline-flex items-center justify-center rounded-md mr-2 border border-transparent bg-gradient-to-r from-shoorah-primary to-shoorah-secondary px-2 py-1 text-xs font-medium text-white shadow-sm hover:shoorah-primary focus:outline-none sm:w-auto"
                          onClick={() =>
                            getSolutionData(
                              thirdGraphMoodsAverage.positive,
                              thirdGraphMoodsAverage.negative,
                              `${radialMood.toUpperCase()} Mood Graph`
                            )
                          }
                        >
                          <svg
                            width="18"
                            height="18"
                            viewBox="0 0 18 7"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M16.001 3.58326H16.501V4.08326V5.83297C16.501 5.87895 16.5383 5.91622 16.5843 5.91622C16.6303 5.91622 16.6675 5.87893 16.6675 5.83301V3.50005C16.6675 3.45407 16.6302 3.4168 16.5843 3.4168H7.78319H7.36061L7.29018 3.00013C7.07744 1.74147 6.09133 0.755343 4.83262 0.542571C3.19925 0.266472 1.65133 1.36677 1.37527 3.00013C1.0992 4.6335 2.1995 6.18142 3.83285 6.45749L3.83286 6.45749C5.46622 6.73359 7.01412 5.6333 7.29022 3.99993L7.36065 3.58326H7.78322H13.0848H13.5848V4.08326V5.83297C13.5848 5.87895 13.6221 5.91622 13.6681 5.91622C13.714 5.91622 13.7513 5.87895 13.7513 5.83297V4.08326V3.58326H14.2513H16.001ZM1.50334 3.50005C1.50334 1.93544 2.77169 0.667089 4.33629 0.667089C5.9009 0.667089 7.16925 1.93544 7.16925 3.50005C7.16925 5.06465 5.9009 6.33301 4.33629 6.33301C2.77169 6.33301 1.50334 5.06465 1.50334 3.50005Z"
                              fill="#E5EAF9"
                              stroke="#E5EAF9"
                            />
                          </svg>
                        </button>
                        <Popover className="relative">
                          {({ open }) => (
                            <>
                              <Popover.Button
                                className={`
                ${open ? '' : 'text-opacity-90'}
                inline-flex items-center justify-center rounded-md border border-transparent bg-gradient-to-r from-shoorah-primary to-shoorah-secondary px-2 py-1 text-xs font-medium text-white shadow-sm hover:shoorah-primary focus:outline-none sm:w-auto`}
                              >
                                <svg
                                  width="18"
                                  height="18"
                                  viewBox="0 0 14 16"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M11.9375 0.876719H10.1773C9.71287 0.340281 9.02837 0 8.26562 0H5.73438C4.97162 0 4.28712 0.340281 3.82266 0.876719H2.0625C1.28709 0.876719 0.65625 1.50881 0.65625 2.28572V14.591C0.65625 15.3679 1.28709 16 2.0625 16H11.9375C12.7129 16 13.3438 15.3679 13.3438 14.591V2.28572C13.3438 1.50878 12.7129 0.876719 11.9375 0.876719ZM5.73438 0.939344H8.26562C8.98991 0.939344 9.59141 1.42419 9.78906 2.06653H4.21094C4.40825 1.42531 5.00897 0.939344 5.73438 0.939344ZM12.4062 14.591C12.4062 14.85 12.196 15.0607 11.9375 15.0607H2.0625C1.80403 15.0607 1.59375 14.85 1.59375 14.591V2.28572C1.59375 2.02675 1.80403 1.81606 2.0625 1.81606H3.30769C3.23834 2.04983 3.20312 2.29238 3.20312 2.53622C3.20312 2.79559 3.413 3.00588 3.67188 3.00588H10.3281C10.587 3.00588 10.7969 2.79559 10.7969 2.53622C10.7969 2.29238 10.7617 2.04983 10.6923 1.81606H11.9375C12.196 1.81606 12.4062 2.02675 12.4062 2.28572V14.591Z"
                                    fill="#E5EAF9"
                                  />
                                </svg>
                              </Popover.Button>
                              <Transition
                                as={Fragment}
                                enter="transition ease-out duration-200"
                                enterFrom="opacity-0 translate-y-1"
                                enterTo="opacity-100 translate-y-0"
                                leave="transition ease-in duration-150"
                                leaveFrom="opacity-100 translate-y-0"
                                leaveTo="opacity-0 translate-y-1"
                              >
                                <Popover.Panel className="bg-white rounded-md border absolute left-3/4 z-10 mt-3 w-screen max-w-[15rem] -translate-x-1/2 transform">
                                  <p
                                    className="px-1 py-2 hover:bg-gray-300 rounded-md cursor-pointer"
                                    onClick={() =>
                                      downloadDocReport(
                                        thirdGraph.data,
                                        thirdGraph.option.labels,
                                        'Single Mood Graph',
                                        'CSV',
                                        radialMood
                                      )
                                    }
                                  >
                                    Download CSV
                                  </p>
                                  <p
                                    className="px-1 py-2 hover:bg-gray-300 rounded-md cursor-pointer"
                                    onClick={() =>
                                      downloadDocReport(
                                        thirdGraph.data,
                                        thirdGraph.option.labels,
                                        `Single Mood Graph`,
                                        'PDF',
                                        radialMood,
                                        true
                                      )
                                    }
                                  >
                                    Download PDF
                                  </p>
                                </Popover.Panel>
                              </Transition>
                            </>
                          )}
                        </Popover>
                      </div>
                    )}
                  </div>
                  <ReactApexChart
                    options={thirdGraph.option}
                    series={thirdGraph.data}
                    type="radialBar"
                    width={'100%'}
                    height={390}
                  />
                </div>
              </div>
            </div>
            <div>
              <div className="flex flex-col justify-center items-center">
                <div className="font-medium text-[18px] my-4">Professional Emotions</div>
                <div className="">
                  <select
                    className="border text-[#666666] border-[#F1F2F4] rounded-md h-10 px-2 w-full"
                    id="moodSelectRadialAlternate"
                    name="moodSelectRadialAlternate"
                    onChange={handleRadialMood}
                  >
                    {/* <option value={""} disabled>
                    Select {graphDataType.thirdGrapgh}
                  </option> */}
                    {redialProfestionalSelect.map((e, i) => (
                      <option key={i} value={e.value}>
                        {e.name}
                      </option>
                    ))}
                  </select>
                </div>
              </div>
              <div className="my-3 flex justify-center">
                <div className="p-5 max-w-fit mx-10 bg-[#F7F7F8] rounded-md">
                  <div>
                    {!props.companyId && (
                      <div className="flex justify-between">
                        <button
                          className="inline-flex items-center justify-center rounded-md mr-2 border border-transparent bg-gradient-to-r from-shoorah-primary to-shoorah-secondary px-2 py-1 text-xs font-medium text-white shadow-sm hover:shoorah-primary focus:outline-none sm:w-auto"
                          onClick={() =>
                            getSolutionData(
                              thirdGraphMoodsAverageAlternate.positive,
                              thirdGraphMoodsAverageAlternate.negative,
                              `${radialMoodAlternate.toUpperCase()} Mood Graph`
                            )
                          }
                        >
                          <svg
                            width="18"
                            height="18"
                            viewBox="0 0 18 7"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M16.001 3.58326H16.501V4.08326V5.83297C16.501 5.87895 16.5383 5.91622 16.5843 5.91622C16.6303 5.91622 16.6675 5.87893 16.6675 5.83301V3.50005C16.6675 3.45407 16.6302 3.4168 16.5843 3.4168H7.78319H7.36061L7.29018 3.00013C7.07744 1.74147 6.09133 0.755343 4.83262 0.542571C3.19925 0.266472 1.65133 1.36677 1.37527 3.00013C1.0992 4.6335 2.1995 6.18142 3.83285 6.45749L3.83286 6.45749C5.46622 6.73359 7.01412 5.6333 7.29022 3.99993L7.36065 3.58326H7.78322H13.0848H13.5848V4.08326V5.83297C13.5848 5.87895 13.6221 5.91622 13.6681 5.91622C13.714 5.91622 13.7513 5.87895 13.7513 5.83297V4.08326V3.58326H14.2513H16.001ZM1.50334 3.50005C1.50334 1.93544 2.77169 0.667089 4.33629 0.667089C5.9009 0.667089 7.16925 1.93544 7.16925 3.50005C7.16925 5.06465 5.9009 6.33301 4.33629 6.33301C2.77169 6.33301 1.50334 5.06465 1.50334 3.50005Z"
                              fill="#E5EAF9"
                              stroke="#E5EAF9"
                            />
                          </svg>
                        </button>
                        <Popover className="relative">
                          {({ open }) => (
                            <>
                              <Popover.Button
                                className={`
                ${open ? '' : 'text-opacity-90'}
                inline-flex items-center justify-center rounded-md border border-transparent bg-gradient-to-r from-shoorah-primary to-shoorah-secondary px-2 py-1 text-xs font-medium text-white shadow-sm hover:shoorah-primary focus:outline-none sm:w-auto`}
                              >
                                <svg
                                  width="18"
                                  height="18"
                                  viewBox="0 0 14 16"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M11.9375 0.876719H10.1773C9.71287 0.340281 9.02837 0 8.26562 0H5.73438C4.97162 0 4.28712 0.340281 3.82266 0.876719H2.0625C1.28709 0.876719 0.65625 1.50881 0.65625 2.28572V14.591C0.65625 15.3679 1.28709 16 2.0625 16H11.9375C12.7129 16 13.3438 15.3679 13.3438 14.591V2.28572C13.3438 1.50878 12.7129 0.876719 11.9375 0.876719ZM5.73438 0.939344H8.26562C8.98991 0.939344 9.59141 1.42419 9.78906 2.06653H4.21094C4.40825 1.42531 5.00897 0.939344 5.73438 0.939344ZM12.4062 14.591C12.4062 14.85 12.196 15.0607 11.9375 15.0607H2.0625C1.80403 15.0607 1.59375 14.85 1.59375 14.591V2.28572C1.59375 2.02675 1.80403 1.81606 2.0625 1.81606H3.30769C3.23834 2.04983 3.20312 2.29238 3.20312 2.53622C3.20312 2.79559 3.413 3.00588 3.67188 3.00588H10.3281C10.587 3.00588 10.7969 2.79559 10.7969 2.53622C10.7969 2.29238 10.7617 2.04983 10.6923 1.81606H11.9375C12.196 1.81606 12.4062 2.02675 12.4062 2.28572V14.591Z"
                                    fill="#E5EAF9"
                                  />
                                </svg>
                              </Popover.Button>
                              <Transition
                                as={Fragment}
                                enter="transition ease-out duration-200"
                                enterFrom="opacity-0 translate-y-1"
                                enterTo="opacity-100 translate-y-0"
                                leave="transition ease-in duration-150"
                                leaveFrom="opacity-100 translate-y-0"
                                leaveTo="opacity-0 translate-y-1"
                              >
                                <Popover.Panel className="bg-white rounded-md border absolute left-3/4 z-10 mt-3 w-screen max-w-[15rem] -translate-x-1/2 transform">
                                  <p
                                    className="px-1 py-2 hover:bg-gray-300 rounded-md cursor-pointer"
                                    onClick={() =>
                                      downloadDocReport(
                                        thirdGraphAlternate.data,
                                        thirdGraphAlternate.option.labels,
                                        'Single Mood Graph',
                                        'CSV',
                                        radialMoodAlternate
                                      )
                                    }
                                  >
                                    Download CSV
                                  </p>
                                  <p
                                    className="px-1 py-2 hover:bg-gray-300 rounded-md cursor-pointer"
                                    onClick={() =>
                                      downloadDocReport(
                                        thirdGraphAlternate.data,
                                        thirdGraphAlternate.option.labels,
                                        `Single Mood Graph`,
                                        'PDF',
                                        radialMoodAlternate,
                                        true
                                      )
                                    }
                                  >
                                    Download PDF
                                  </p>
                                </Popover.Panel>
                              </Transition>
                            </>
                          )}
                        </Popover>
                      </div>
                    )}
                  </div>
                  <ReactApexChart
                    options={thirdGraphAlternate.option}
                    series={thirdGraphAlternate.data}
                    type="radialBar"
                    width={'100%'}
                    height={390}
                  />
                </div>
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  );
}

export default CDashboard;
